package "stabilitytest/syntax"

import "flatlang/datastruct/list/Iterator"
import "flatlang/datastruct/HashMap"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class {
  test `basic string iterator with explicit type declarations`() {
      String[] list = ["this", "is", "a", "test", "to", "see", "what shows up"]
      String[] list2 = list.filter({ _.count >= 4 })

      Iterator<String> iter = list2.iterator

      while (iter.hasNext) {
          expect(iter.stepNext.count >= 4).toBe(true, "Failed to run iterator")
      }
  }

  test `basic string iterator with implicit type declaration`() {
      let list = ["this", "is", "a", "test", "to", "see", "what shows up"]
      let list2 = list.filter({ _.count >= 4 })
      let iter = list2.iterator

      while (iter.hasNext) {
          expect(iter.stepNext.count >= 4).toBe(true, "Failed to run iterator")
      }
  }

  test `basic string iterator with two variable declarations`() {
      let list = ["this", "is", "a", "test", "to", "see", "what shows up"]
      let iter = list.filter({ _.count >= 4 }).iterator

      while (iter.hasNext) {
          expect(iter.stepNext.count >= 4).toBe(true, "Failed to run iterator")
      }
  }

  // test `basic string iterator with one variable declaration`() {
  //     let iter = ["this", "is", "a", "test", "to", "see", "what shows up"]
  //       .filter({ _.count >= 4 })
  //       .iterator

  //     while (iter.hasNext) {
  //         expect(iter.stepNext.count >= 4).toBe(true, "Failed to run iterator")
  //     }
  // }

  test `basic HashMap iterator`() {
      let map = new HashMap<String, String>()
        :add("one", "1")
        :add("two", "2")
        :add("three", "3")

      let iter = map.iterator
      let keys = new Array<String>()
      let values = new Array<String>()

      while (iter.hasNext) {
        let pair = iter.stepNext
        keys.add(pair.key)
        values.add(pair.value)
        expect(pair.key.count >= 3).toBe(true, "Failed to run iterator. Expected count of >= 3 for #pair.key")
      }

      expect(keys.count).toBe(3)
      expect(keys[0]).toBe("one")
      expect(keys[1]).toBe("two")
      expect(keys[2]).toBe("three")
      expect(values.count).toBe(3)
      expect(values[0]).toBe("1")
      expect(values[1]).toBe("2")
      expect(values[2]).toBe("3")
  }
}