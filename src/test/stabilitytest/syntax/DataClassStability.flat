package stabilitytest/syntax

import novex/nest/Nest
import novex/nest/TestSuite

testable class {
  data class InnerTestClass {
    public construct(
      visible String one,
      visible Int two,
      visible List three
    ) {}
  }

  test `can create outer data class`() {
    let value = OuterTestClass(
      "one",
      2,
      Array<String>():add("three")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
  }

  test `can copy outer data class`() {
    let value = OuterTestClass(
      "one",
      2,
      Array<String>():add("three")
    )

    let copy = value.copy(
      two: 4
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
  }

  test `can create inner data class`() {
    let value = InnerTestClass(
      "one",
      2,
      Array<String>():add("three")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
  }

  test `can copy inner data class`() {
    let value = InnerTestClass(
      "one",
      2,
      Array<String>():add("three")
    )

    let copy = value.copy(
      two: 4
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
  }

  data class SubInnerTestClass extends InnerTestClass {
    public construct(
      String one,
      Int two,
      List three,
      visible String four,
      visible Int five,
      visible List six
    ) {
      super(one, two, three)
    }
  }

  test `can create sub data class`() {
    let value = SubInnerTestClass(
      "one",
      2,
      Array<String>():add("three"),
      "four",
      5,
      Array<String>():add("six")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
    expect(value.four).toBe("four")
    expect(value.five).toBe(5)
    expect(value.six).toBe(["six"])
  }

  test `can copy sub data class`() {
    let value = SubInnerTestClass(
      "one",
      2,
      Array<String>():add("three"),
      "four",
      5,
      Array<String>():add("six")
    )

    let copy = value.copy(
      two: 4,
      six: Array<String>():add("seven")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
    expect(value.four).toBe("four")
    expect(value.five).toBe(5)
    expect(value.six).toBe(["six"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
    expect(copy.four).toBe("four")
    expect(copy.five).toBe(5)
    expect(copy.six).toBe(["seven"])
  }

  data class InnerTestClassWithoutConstructor {
    visible String one
    visible Int two
    visible List three
  }

  test `can create outer dataclass without constructors`() {
    let value = OuterTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
  }

  test `can copy outer dataclass without constructors`() {
    let value = OuterTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three")
    )

    let copy = value.copy(
      two: 4
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
  }

  test `can create inner dataclass without constructors`() {
    let value = InnerTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
  }

  test `can copy inner dataclass without constructors`() {
    let value = InnerTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three")
    )

    let copy = value.copy(
      two: 4
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
  }

  data class SubInnerTestClassWithoutConstructor extends InnerTestClassWithoutConstructor {
    visible String four
    visible Int five
    visible List six
  }

  test `can create sub dataclass without constructors`() {
    let value = SubInnerTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three"),
      four: "four",
      five: 5,
      six: Array<String>():add("six")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
    expect(value.four).toBe("four")
    expect(value.five).toBe(5)
    expect(value.six).toBe(["six"])
  }

  test `can copy sub dataclass without constructors`() {
    let value = SubInnerTestClassWithoutConstructor(
      one: "one",
      two: 2,
      three: Array<String>():add("three"),
      four: "four",
      five: 5,
      six: Array<String>():add("six")
    )

    let copy = value.copy(
      two: 4,
      six: Array<String>():add("seven")
    )

    expect(value).toNotBe(null)
    expect(value.one).toBe("one")
    expect(value.two).toBe(2)
    expect(value.three).toBe(["three"])
    expect(value.four).toBe("four")
    expect(value.five).toBe(5)
    expect(value.six).toBe(["six"])

    expect(copy).toNotBe(null)
    expect(copy.one).toBe("one")
    expect(copy.two).toBe(4)
    expect(copy.three).toBe(["three"])
    expect(copy.four).toBe("four")
    expect(copy.five).toBe(5)
    expect(copy.six).toBe(["seven"])
  }
}

data class OuterTestClass {
  public construct(
    visible String one,
    visible Int two,
    visible List three
  ) {}
}

data class OuterTestClassWithoutConstructor {
  visible String one
  visible Int two
  visible List three
}