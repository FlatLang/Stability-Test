package "stabilitytest"

import "flatlang/time/Timer"
import "flatlang/time/DateTime"
import "flatlang/time/DateTime.InvalidDateException"
import "flatlang/time/Interval"
import "flatlang/time/BoundedInterval"
import "flatlang/time/BoundlessInterval"
import "flatlang/time/Interval.InvalidIntervalException"
import "flatlang/time/BoundlessInterval.InfiniteIntervalException"
import "flatlang/thread/Thread"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class BoundlessIntervalStability {
    test invalidBoundlessIntervalBounds() {
        expect({ new BoundlessInterval(new DateTime(year: 4), new DateTime(year: 5)) }).toThrow(InvalidIntervalException.class)
    }

    test validIntervalBounds() {
        expect({ new BoundlessInterval() }).toNotThrow(InvalidIntervalException.class)
        expect({ new BoundlessInterval(new DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
        expect({ new BoundlessInterval(end: new DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
        expect({ new BoundlessInterval(null, new DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
        expect({ new BoundlessInterval(new DateTime(year: 4), null) }).toNotThrow(InvalidIntervalException.class)
    }

    test infiniteIntervalValues() {
        let interval = new Interval(null, new DateTime(year: 5))

        expect({ interval.years }).toThrow(InfiniteIntervalException.class)
    }
}