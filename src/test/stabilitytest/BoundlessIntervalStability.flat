package stabilitytest

import flat/time/Timer
import flat/time/DateTime
import flat/time/DateTime.InvalidDateException
import flat/time/Interval
import flat/time/BoundedInterval
import flat/time/BoundlessInterval
import flat/time/Interval.InvalidIntervalException
import flat/time/BoundlessInterval.InfiniteIntervalException
import flat/thread/Thread

import novex/nest/Nest
import novex/nest/TestSuite

testable class BoundlessIntervalStability {
  test invalidBoundlessIntervalBounds() {
    expect({ BoundlessInterval(DateTime(year: 4), DateTime(year: 5)) }).toThrow(InvalidIntervalException.class)
  }

  test validIntervalBounds() {
    expect({ BoundlessInterval() }).toNotThrow(InvalidIntervalException.class)
    expect({ BoundlessInterval(DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
    expect({ BoundlessInterval(end: DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
    expect({ BoundlessInterval(null, DateTime(year: 5)) }).toNotThrow(InvalidIntervalException.class)
    expect({ BoundlessInterval(DateTime(year: 4), null) }).toNotThrow(InvalidIntervalException.class)
  }

  test infiniteIntervalValues() {
    let interval = Interval(null, DateTime(year: 5))

    expect({ interval.years }).toThrow(InfiniteIntervalException.class)
  }
}