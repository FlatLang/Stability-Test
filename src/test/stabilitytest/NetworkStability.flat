package "stabilitytest"

import "flatlang/network/ServerSocket"
import "flatlang/network/ClientSocket"
import "flatlang/network/ConnectionSocket"
import "flatlang/thread/Thread"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class NetworkStability {
    visible static final String RECEIVED = "THIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVED"

    visible static final Int PORT = 24243

    [Test "Testing starting ServerSocket"]
    public async testStartServerSocket() {
        let server = new ServerSocket()

        expect(await server.start(PORT)).toBe(true, "Unable to start server")
        expect(server.close()).toBe(true, "Unable to close server")
    }

    [Test "Testing ClientSocket connection"]
    public async testClientSocketConnection() {
        let server = await new ServerSocket():start(PORT)

        let receivedClientAsync = server.on("client_connected")

        out.write("- accepting ClientSocket connection... ")

        let client = new ClientSocket("localhost", PORT)

        expect(await client.connect()).toBe(true, "Client failed to connect")

        let receivedClient = await receivedClientAsync

        expect(receivedClient).toNotBe(null, "Failed to accept the client")
        expect(client.close()).toBe(true, "Unable to close client connection")
        expect(server.close()).toBe(true, "Unable to close server")
    }

    [Test "Testing Socket communication"]
    public async testSocketCommunication() {
        let server = await new ServerSocket():start(PORT)
        let client = await new ClientSocket("localhost", PORT):connect()

        out.write("- sending String to ClientSocket... ")

        let responseDataAsync = server.on("data")

        expect(client.write(RECEIVED)).toBe(true, "Server unable to send data to client")

        let responseData = await responseDataAsync

        expect(responseData.count == RECEIVED.count && responseData == RECEIVED).toBe(true, "Server unable to receive correct message from client. Expected message of size #RECEIVED.count, but received of size #responseData.count")

        expect(client.close()).toBe(true, "Unable to close client connection")
        expect(server.close()).toBe(true, "Unable to close server")
    }
}