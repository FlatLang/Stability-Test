package "stabilitytest"

import "flatlang/datastruct/HashMap"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class PrimitiveOverloadStability {
    [Test "Testing primitive key for HashMap<Int, String>"]
    public test() {
        let map1 = new HashMap<Int, String>()

        map1[5] = "test"
        map1[10] = "test2"

        var sum = 0
        var counter = 0

        for (entry in map1) {
            sum += entry.key

            counter++
        }

        expect(counter).toBe(2, "Failed to iterator over map values. Expected counter value of 2, but got #counter")
        expect(sum).toBe(15, "Failed to get valid key values. Expected a sum of 15, but got #sum")
    }

    [Test "Testing primitive key and value for HashMap<Int, Int>"]
    testPrimitiveKeyAndValue() {
        let map2 = new HashMap<Int, Int>()

        var sum = 0
        var counter = 0

        map2[1] = 49
        map2[3] = 2
        map2[-2] = 11

        for (entry in map2) {
            sum += entry.key * entry.value

            counter++
        }

        expect(counter).toBe(3, "Failed to iterator over map values. Expected counter value of 2, but got #counter")
        expect(sum).toBe(49 + 6 - 22, "Failed to get valid key values. Expected a sum of #{49 + 6 - 22}, but got #sum")
    }

    [Test "Testing functional primitive key for HashMap<Int, String>"]
    testFunctionalPrimitiveKey() {
        let map1 = new HashMap<Int, String>()

        map1[5] = "test"
        map1[10] = "test2"

        var sum = 0
        var counter = 0

        map1.forEach(entry => {
            sum += entry.key

            counter++
        })

        expect(counter).toBe(2, "Failed to iterator over map values. Expected counter value of 2, but got #counter")
        expect(sum).toBe(15, "Failed to get valid key values. Expected a sum of 15, but got #sum")
    }

    [Test "Testing functional primitive key and value for HashMap<Int, Int>"]
    testFunctionalPrimitiveKeyAndValue() {
        let map2 = new HashMap<Int, Int>()

        var sum = 0
        var counter = 0

        map2[1] = 49
        map2[3] = 2
        map2[-2] = 11

        map2.forEach(entry => {
            sum += entry.key * entry.value

            counter++
        })

        expect(counter).toBe(3, "Failed to iterator over map values. Expected counter value of 2, but got #counter")
        expect(sum).toBe(49 + 6 - 22, "Failed to get valid key values. Expected a sum of #{49 + 6 - 22}, but got #sum")
    }

    test `primitive facade functionality`() {
        let str = 'a'.toString()

        expect(str).toBe("a")
    }
}